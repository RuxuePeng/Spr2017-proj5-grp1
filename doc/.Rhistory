phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
str_detect(strings, phone)
str_count(strings, phone)
str_locate(strings, phone)
str_locate_all(strings, phone)
str_extract(strings, phone)
str_extract_all(strings, phone, simplify = TRUE)
str_subset(strings, phone)
str_detect(strings, phone)
str_subset(strings, phone)
str_match(strings, phone)
str_replace(strings, phone, "XXX-XXX-XXXX")
str_replace_all(strings, phone, "XXX-XXX-XXXX")
vignette("regular-expressions")
str_subset(strings, phone)
str_match(strings, phone)
str_match_all(strings, phone)
str_split("a-b-c", "-")
str_replace(strings, phone, "XXX-XXX-XXXX")
str_extract(strings, phone)
phone <- "[2-9][0-9]{2}[- .][0-9]{3}[- .][0-9]{4}"
str_detect(strings, phone)
str_subset(strings, phone)
str_match(strings,phone)
phone <- "[2-9][0-9]{2}[-.][0-9]{3}[-.][0-9]{4}"
str_match(strings,phone)
phone <- "[2-9][0-9]{2}[- .][0-9]{3}[- .][0-9]{4}"
str_match(strings,phone)
library(rvest)
query_list<-c("BOS","CHI","WAS","ATL","TOR","MIL","CLE","IND",
"GSW","POR","LAC","UTA","HOU","OKC","SAS","MEM")
update<-list()
url<-paste0("http://www.basketball-reference.com/teams/",query_list[i],"/2017/gamelog/")
i>_1
i<-11
url<-paste0("http://www.basketball-reference.com/teams/",query_list[i],"/2017/gamelog/")
table<-read_html(url) %>%
html_nodes("table")%>%
html_table()
View(table)
src<-rdom("http://www.basketball-reference.com/teams/BOS/2017/gamelog/","#tgl_basic_playoffs > tbody")
library(devtools)
library(devtools)
library(rdom)
src<-rdom("http://www.basketball-reference.com/teams/BOS/2017/gamelog/","#tgl_basic_playoffs > tbody")
src
url<-"http://www.basketball-reference.com/teams/BOS/2017/gamelog/"
library(RSelenium)
pJS <- rsDriver()
remDr <- remoteDriver(browserName="chrome", port=4444)
remDr$open(silent=T)
remDr$navigate(url)
webElem <- remDr$findElement(using = 'id', value = "tgl_basic_playoffs.1")
webElem <- remDr$findElement(using = 'id', value = "all_tgl_basic_playoffs")
webElem
webElem$getElementText()
webElem <- remDr$findElement(using = 'id', value = "tgl_basic_playoffs.1")
webElem <- remDr$findElement(using = 'xpath', value = "/comment")
webElem <- remDr$findElement(using = 'css', value = "/comment")
webElem <- remDr$findElement(using = 'css', value = "comment")
url<-paste0("http://www.basketball-reference.com/teams/",query_list[i],"/2017/gamelog/")
table<-read_html(url) %>%
html_nodes("8")%>%
html_table()
url<-paste0("http://www.basketball-reference.com/teams/",query_list[i],"/2017/gamelog/")
table<-read_html(url) %>%
html_nodes("comment")%>%
html_table()
table
table<-read_html(url) %>%
html_nodes("comment")
table
table<-read_html(url) %>%
html_nodes("Comment")
table
table<-read_html(url)
table
table<-read_html(url)[[2]]
table
library(stringr)
str_replace(table,"<!--","")
table<-read_html(url)%>%
html_tag()
table<-read_html(url)%>%
html_name()
table
table<-read_html(url)%>%
html_children()
table
text<-readLines(table,warning=F)
text<-readLines(table)
table<-read_html(url)
text<-readLines(table)
a<-readLines(url)
a
str_replace(a,"<!--","")
a<-str_replace(a,"<!--","")
a<-str_locate(a,"<!--")
a
a<-a[a,]
a
a==TRUE
unique(a)
which(a,3274)
which(a[1,]==3274)
which(!is.na(a[1,]))
which(!is.na(a))
a<-str_locate(a,"<!--")
a[1389,]
a[2782,]
( m <- matrix(1:12, 3, 4) )
div.3 <- m %% 3 == 0
which(div.3)
a<-str_locate(a,"<!--")
( m <- matrix(1:12, 3, 4) )
x
a<-str_locate(a,"<!--")
which(!is.na(a))
a
which(!is.na(a))
a<-readLines(url)
a<-str_locate(a,"<!--")
which(!is.na(a))
which(!is.na(a),arr.ind=TRUE)
dim(a)
a[,1]
a[,2]
which(!is.na(a),arr.ind=TRUE)
a<-readLines(url)
mypattern = "<tr id=\"tgl_basic_playoffs.[1-9]\">([^<]*)</tr>"
datalines = grep(mypattern,a,value=TRUE)
datalines
<tr id="tgl_basic_playoffs.1" >
datalines = grep(mypattern,a,value=TRUE)
<tr id="tgl_basic_playoffs.1" >
mypattern = "id=\"tgl_basic_playoffs.[1-9]""
datalines = grep(mypattern,a,value=TRUE)
x
mypattern = "id=\"tgl_basic_playoffs.[1-9]"
mypattern = "id=\"tgl_basic_playoffs.[1-9]\""
datalines = grep(mypattern,a,value=TRUE)
datalines
length(datalines)
html_table(datalines)
mypattern = "id=\"tgl_basic_playoffs.[1-9]\""
datalines = grep(mypattern,a,value=TRUE)
query_list<-c("BOS","CHI","WAS","ATL","TOR","MIL","CLE","IND",
"GSW","POR","LAC","UTA","HOU","OKC","SAS","MEM")
url<-paste0("http://www.basketball-reference.com/teams/",query_list[i],"/2017/gamelog/")
i<-2
url<-paste0("http://www.basketball-reference.com/teams/",query_list[i],"/2017/gamelog/")
a<-readLines(url)
mypattern = "id=\"tgl_basic_playoffs.[1-9]+\""
datalines = grep(mypattern,a,value=TRUE)
a<-readLines(url)
mypattern = "id=\"tgl_basic_playoffs.[1-9]+\""
datalines = grep(mypattern,a,value=TRUE)
datalines
length(dataliens)
length(datalines)
View(datalines)
print(datalines)
print(datalines[1])
url
query<-read_html("http://www.basketball-reference.com/playoffs/NBA_2017.html")%>%
html_nodes("table") %>%
html_table(fill=TRUE)%>%
.[[10]]%>%
.[1:16,2]
url<-"http://www.basketball-reference.com/teams/BOS/2017/gamelog/"
library(RSelenium)
pJS <- rsDriver()
remDr <- remoteDriver(browserName="chrome", port=4444)
remDr$open(silent=T)
remDr$navigate(url)
webElem <- remDr$findElement(using = 'css', value = "table")
webElem
webElem$getElementText()
webElem <- remDr$findElement(using = 'id', value = "div_tgl_basic_playoffs")
remDr$open
remDr$open()
webElem <- remDr$findElement(using = 'id', value = "div_tgl_basic_playoffs")
remDr$goForward()
webElem <- remDr$findElement(using = 'id', value = "div_tgl_basic_playoffs")
remDr$getCurrentUrl()
remDr$navigate(url)
remDr$navigate(url)
remDr$getCurrentUrl()
webElem <- remDr$findElement(using = 'id', value = "div_tgl_basic_playoffs")
remDr$navigate(url)
remDr$getCurrentUrl()
remDr$refresh()
webElem <- remDr$findElement(using = 'id', value = "div_tgl_basic_playoffs")
webElem <- remDr$findElement(using = 'id', value = "content")
webElem
webElem$getElementText()
id
webElem <- remDr$findElement(using = 'id', value = "all_tgl_basic_playoffs")
webElem$getElementText()
webElem$getElementAttribute("src")
webElem <- remDr$findElement(using = 'id', value = "all_tgl_basic_playoffs")
webElem$getElementAttribute("src")
webElem$getElementAttribute(")
//*[@id="all_tgl_basic_playoffs"]/comment()
webElem$getElementAttribute()
remDr$switchToFrame(webElem[[2]])
remDr$switchToFrame(webElem)
XML::htmlParse(remDr$getPageSource()[[1]])
get_data = "data-stat=\"(.*)\" .* >(.*)<"
library(stringr)
str_match(datlines,get_data)
str_match(datalines,get_data)
get_data = "data-stat=\"(.*)\" .* >(.*)</"
str_match(datalines,get_data)
str_extract(datalines,get_data)
str_match(datalines,get_data)
get_data = "[A-Z0-9]"
str_match(datalines,get_data)
str_match_all(datalines,get_data)
get_data = "[A-Z0-9]*"
str_match_all(datalines,get_data)
get_data = "[A-Z0-9]+"
str_match_all(datalines,get_data)
str_match_all(datalines,get_data)
result<-str_match_all(datalines,get_data)
result[[1]]
get_data = "[.]+[A-Z0-9]+"
result<-str_match_all(datalines,get_data)
result
get_data = "[.]?[A-Z0-9]+"
get_data
result<-str_match_all(datalines,get_data)
result
result[[1]][16:length(result[[1]])]
get_data = ">([.]?[A-Z0-9]+)<"
result<-str_match_all(datalines,get_data)
result[[1]][16:length(result[[1]])]
result<-str_match_all(datalines,get_data)
result
result[[1]][,2]
get_data = ">([.]?[A-Z0-9-]+)<"
result<-str_match_all(datalines,get_data)
result[[1]][,2]
unlist(result)
result<-str_match_all(datalines,get_data)
length(result)
result[,2]
data.frame(result)
result
exponential<-function(x, theta){
return(theta*exp(-theta*x))
}
x<-seq(0,4,0.1)
plot(explonential(x,1))
exponential<-function(x, theta){
return(theta*exp(-theta*x))
}
plot(exponential(x,1))
x
plot(x=x,y=exponential(x,1),)
plot(x=x,y=exponential(x,1),ylab="density")
Y<-exponential(X,1)
X<-c(1,2,4)
Y<-exponential(X,1)
points(X,Y,col=2)
plot(x=x,y=exponential(x,1),ylab="density")
X<-c(1,2,4)
Y<-exponential(X,1)
points(X,Y,col=2,pch=1)
points(X,Y,col=2,pch=2)
points(X,Y,col=2,pch=3)
plot(x=x,y=exponential(x,1),ylab="density")
X<-c(1,2,4)
Y<-exponential(X,1)
points(X,Y,col=2,pch=3)
abline(h=Y)
lines(x=x,y=exponential(x,2))
lines(x=x,y=exponential(x,0.5))
lines(x=x,y=exponential(x,1.7))
plot(x=x,y=exponential(x,1),ylab="density")
lines(x=x,y=exponential(x,2))
lines(x=x,y=exponential(x,1.7))
points(X,Y,col=2,pch=3)
library(randomForest)
install.packages("randomForest")
library(randomForest)
source("../lib/function.R")
#### Specify Path:
train.path="../data/PerGame_2015/"
test.path="../data/PerGame_playoff_2016/"
tra=list.files(path = train.path, pattern = "*.csv")
tes=list.files(path = test.path, pattern = "*.csv")
tra1<-substr(tra, start=1, stop=nchar(tra)-9)
tes1<-substr(tes, start=1, stop=nchar(tes)-9)
train_data<-as.list(1:length(tra))
test_data<-as.list(1:length(tes))
names(train_data)<-tra
names(test_data)<-tes
## Read as list:
for (i in tra){
train_data[[i]]<-read.csv(paste(train.path,i,sep = ""),header = T,as.is=T)
}
train_data<-lapply(train_data,clean_data)
source("../lib/function.R")
getwd(
)
setwd("/Users/yuejin/Dropbox/Courseworks/ADS/proj5/Spr2017-proj5-grp1/doc")
source("../lib/function.R")
for (i in tra){
train_data[[i]]<-read.csv(paste(train.path,i,sep = ""),header = T,as.is=T)
}
train_data<-lapply(train_data,clean_data)
x
names(train_data[[1]])
colnames(train_data[[1]])
train_data
for (i in tra){
train_data[[i]]<-read.csv(paste(train.path,i,sep = ""),header = T,as.is=T)
}
train_data
train.path="../data/PerGame_2015/"
test.path="../data/PerGame_playoff_2016/"
tra=list.files(path = train.path, pattern = "*.csv")
tes=list.files(path = test.path, pattern = "*.csv")
tra1<-substr(tra, start=1, stop=nchar(tra)-9)
tes1<-substr(tes, start=1, stop=nchar(tes)-9)
train_data<-as.list(1:length(tra))
test_data<-as.list(1:length(tes))
names(train_data)<-tra
names(test_data)<-tes
for (i in tra){
train_data[[i]]<-read.csv(paste(train.path,i,sep = ""),header = T,as.is=T)
}
train_data<-lapply(train_data,clean_data)
wt<-0.9^seq(82, 1, by = -1)
wt<-wt/sum(wt)
ave_perf<-lapply(train_data,get_average,weight=wt)
matrix(rep(wt,d),nrow = n,byrow = F)
ave_perf<-Reduce(rbind,ave_perf)
ave_perf<-Reduce(rbind,ave_perf)
d<-ncol(ave_perf)
rownames(ave_perf)<-tes1
test_data<-read.csv("../data/Test.csv")
test_data_features<-test_data
n_test<-nrow(test_data)
d_test<-ncol(test_data)
for(i in 1:n_test){
teamA<-test_data$TeamA[i]
opp<-test_data$Opp[i]
ind1<-which(tes1==teamA)
ind2<-which(tes1==opp)
test_data_features[i,3:34]<-c(ave_perf[ind1,],ave_perf[ind2,])
ave_perf[ind1,]<-(ave_perf[ind1,]+as.numeric(test_data[i,3:18]))/2
ave_perf[ind2,]<-(ave_perf[ind2,]+as.numeric(test_data[i,19:34]))/2
}
dim(ave_perf)
ave_perf<-lapply(train_data,get_average,weight=wt)
ave_perf<-Reduce(rbind,ave_perf)
d<-ncol(ave_perf)
rownames(ave_perf)<-tes1
test_data<-read.csv("../data/Test.csv")
test_data_features<-test_data
n_test<-nrow(test_data)
d_test<-ncol(test_data)
dim(ave_perf)
for(i in 1:n_test){
teamA<-test_data$TeamA[i]
opp<-test_data$Opp[i]
ind1<-which(tes1==teamA)
ind2<-which(tes1==opp)
test_data_features[i,3:34]<-c(ave_perf[ind1,],ave_perf[ind2,])
ave_perf[ind1,]<-(ave_perf[ind1,]+as.numeric(test_data[i,3:18]))/2
ave_perf[ind2,]<-(ave_perf[ind2,]+as.numeric(test_data[i,19:34]))/2
}
dim(ave_perf)
dim(test_data_features
)
dim(train_data)
length(train_data)
####Load trainging and testing data:
####Source function:
source("../lib/function.R")
####Specify Path:
train.path="../data/PerGame_2015/"
test.path="../data/PerGame_playoff_2016/"
tra=list.files(path = train.path, pattern = "*.csv")
tes=list.files(path = test.path, pattern = "*.csv")
tra1<-substr(tra, start=1, stop=nchar(tra)-9)
tes1<-substr(tes, start=1, stop=nchar(tes)-9)
train_data<-as.list(1:length(tra))
test_data<-as.list(1:length(tes))
names(train_data)<-tra
names(test_data)<-tes
##Read as list:
for (i in tra){
train_data[[i]]<-read.csv(paste(train.path,i,sep = ""),header = T,as.is=T)
}
#for (i in tes){
# test_data[[i]]<-read.csv(paste(test.path,i,sep = ""),header = T,as.is=T)
#}
##Data Cleaning
train_data<-lapply(train_data,clean_data)
##get historical performace
####Get the averge performance
wt<-0.9^seq(82, 1, by = -1)
wt<-wt/sum(wt)
Ave_performace<-lapply(train_data,get_average,weight=rep(1/82,82))
Ave_performace<-Reduce(rbind,Ave_performace)
d<-ncol(Ave_performace)
rownames(Ave_performace)<-tes1
##Obtain the test data:
test_data<-read.csv("../data/Test.csv")
test_data_festures<-test_data
n_test<-nrow(test_data)
d_test<-ncol(test_data)
##Update features for the testing data:
for(i in 1:n_test){
teamA<-test_data$TeamA[i]
opp<-test_data$Opp[i]
ind1<-which(tes1==teamA)
ind2<-which(tes1==opp)
test_data_festures[i,3:34]<-c(Ave_performace[ind1,],Ave_performace[ind2,])
Ave_performace[ind1,]<-(Ave_performace[ind1,]+as.numeric(test_data[i,3:18]))/2
Ave_performace[ind2,]<-(Ave_performace[ind2,]+as.numeric(test_data[i,19:34]))/2
}
##Converting to matrix form:
train_data<-Reduce(rbind,train_data)
test_data_festures<-test_data_festures[,-c(1,2)]
dim(train_data)
dim(test_data_festures)
#colnames(train_data)
#colnames(test_data)
##
##################################################
##Modelling:XGBOOST:
#####################################################
install.packages('xgboost')
library(xgboost)
####Data Preperation:
Train.x<- data.matrix(train_data[,-c(ncol(train_data)-1)])
Train.y<-train_data[,c(ncol(train_data)-1)]
Test.x<-data.matrix(test_data_festures[,-c(ncol(test_data_festures)-1)])
Test.y<-test_data_festures[,c(ncol(test_data_festures)-1)]
Train.x<- data.matrix(Train.x,rownames.force = NA)
Train.D <- xgb.DMatrix(data=Train.x,label=Train.y,missing = NaN)
Test.x<- data.matrix(Test.x,rownames.force = NA)
Test.D <- xgb.DMatrix(data=Test.x,label=Test.y,missing = NaN)
#write.csv(test_data_festures,"../data/test_final.csv",row.names = F)
######CV to select the best parameters:
depth.choice<- c(5,6,7,8)
eta.choice<- seq(0.1,0.5,0.1)
#Initilize:
error<-matrix(NA,nrow = length(eta.choice),ncol = length(depth.choice))
iteration<-matrix(NA,nrow = length(eta.choice),ncol = length(depth.choice))
##################
train.sd<-matrix(NA,nrow = length(eta.choice),ncol = length(depth.choice))
test.sd<-matrix(NA,nrow = length(eta.choice),ncol = length(depth.choice))
for (i in 1:length(depth.choice)) {
for (j in 1:length(eta.choice) ) {
parameters <- list ( objective = "binary:logistic",
#booser = "gbtree",
eta = eta.choice[j],
max_depth = depth.choice[i],
subsample = 0.5,
gamma = 0)
crossvalid <- xgb.cv( params = parameters,
data = Train.D,
nrounds = 100,
verbose = 1,
maximize = FALSE,
nfold = 5,
early_stopping_rounds = 8,
print_every_n = 1)
iteration[j,i]<-crossvalid$best_iteration
error[j,i]<-as.numeric(crossvalid$evaluation_log[crossvalid$best_iteration,4])
}
}
names(train_data)
model <- randomForest(y ~ . - y, data = train_data)
model <- randomForest(as.factor(y) ~ . - y, data = train_data)
pred <- predict(model, newdata = test_data_festures)
colnames(test_data_festures)
pred <- predict(model, newdata = test_data_festures[,-y])
Train.x<- data.matrix(train_data[,-c(ncol(train_data)-1)])
Train.y<-train_data[,c(ncol(train_data)-1)]
Test.x<-data.matrix(test_data_festures[,-c(ncol(test_data_festures)-1)])
Test.y<-test_data_festures[,c(ncol(test_data_festures)-1)]
pred <- predict(model, newdata = Test.x)
pred <- predict(model, newdata = Test.x)
pred <- predict(model, newdata =test_data_festures)
mean(pred!=Test.y)
model$predicted
model$ntree
ntree<- ntree <- seq(100, 600, by=50)
err<-NULL
for (i in 1:length(ntree) ) {
rf <- randomForest(as.factor(y) ~ . - y, data = train_data,ntree=ntree[i])
err[i]<-as.numeric(rf$predicted!=train_data$y)
}
ntree.best<-ntree[which.min(err)]
ntree.best
warnings()
ntree<- ntree <- seq(100, 600, by=100)
err<-NULL
for (i in 1:length(ntree) ) {
rf <- randomForest(as.factor(y) ~ . - y, data = train_data,ntree=ntree[i])
err[i]<-mean(rf$predicted!=train_data$y)
}
ntree.best<-ntree[which.min(err)]
ntree,best
ntree.best
mean(model$predicted!=train_data$y)
