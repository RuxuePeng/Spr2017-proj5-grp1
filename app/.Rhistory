delta <- norm((A-A_old), type = "O") # update with each iteration
# turn soft assignment into hard assignment
}
m <- apply(A, 1, max) # dimension for m should be 1*n
# m[i] represents for which cluster observation i is assigned to
return(m)
}
a <- MultinomialEM(H = H+0.01, K = 3, tau = 0.001)
H<-matrix(readBin("~/Documents/Columbia/Spring2017/GR5241SML/HWS/HW5/histograms.bin", "double", 640000), 40000, 16)
H <- H + 0.01
K
n <- nrow(H) # number of observations
n
index <- sample(1:n, K, replace = F)
t <- H[index, ]/rowSums(H[index, ])
A <- matrix(NA, nrow = n, ncol = K)
phi <- matrix(NA, nrow = n, ncol = K)
c <- NA
b <- matrix(NA, nrow = n, ncol = ncol(H))
delta <- 9999 # assign delta to be large at the beginning of while loop, updated with each iteration
A_old <- A # at the beginning of each iteration, assign old value of A as A_old
i
k
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
phi[2,1]
H[i, ]
log(t[k, ])
sum(H[i, ]*log(t[k, ]))
exp(sum(H[i, ]*log(t[k, ])))
?exp
c[k]
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
delta <- norm((A-A_old), type = "O") # update with each iteration
delta
MultinomialEM <- function(H, K, tau) {
n <- nrow(H) # number of observations
# initial centroid t (normalized)
index <- sample(1:n, K, replace = F)
t <- H[index, ]/rowSums(H[index, ])
# t is a matrix with dimension K*d(#of col for H), with each row represnents for a centroid.
# initial values before iteration
A <- matrix(0, nrow = n, ncol = K)
phi <- matrix(0, nrow = n, ncol = K)
c <- 1/K
b <- matrix(0, nrow = n, ncol = ncol(H))
delta <- 9999 # assign delta to be large at the beginning of while loop, updated with each iteration
while (delta >= tau) {
A_old <- A # at the beginning of each iteration, assign old value of A as A_old
for (k in 1:K) {
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
# M-step
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
}
#Compute a measure of the change of assignments during the current iteration
delta <- norm((A-A_old), type = "O") # update with each iteration
# turn soft assignment into hard assignment
}
m <- apply(A, 1, max) # dimension for m should be 1*n
# m[i] represents for which cluster observation i is assigned to
return(m)
}
H<-matrix(readBin("~/Documents/Columbia/Spring2017/GR5241SML/HWS/HW5/histograms.bin", "double", 640000), 40000, 16)
H <- H + 0.01
a <- MultinomialEM(H = H, K = 3, tau = 0.001)
rep(1/K, K)
k
K
for (k in 1:K) {
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
# M-step
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
}
c <- rep(1/K, K) #set initial value of weights c
c
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
A[, k]
dim(A[, k])
dim(A)
k
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
n <- nrow(H) # number of observations
index <- sample(1:n, K, replace = F)
t <- H[index, ]/rowSums(H[index, ])
A <- matrix(0, nrow = n, ncol = K)
phi <- matrix(0, nrow = n, ncol = K)
c <- rep(1/K, K) #set initial value of weights c
b <- matrix(0, nrow = n, ncol = ncol(H))
delta <- 9999 # assign delta to be large at the beginning of while loop, updated with each iteration
A_old <- A # at the beginning of each iteration, assign old value of A as A_old
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
phi[1,]
phi[n,]
phi[n-10,]
A[, 2]
A[20, 2]
for (k in 1:K) {
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
# M-step
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
}
delta <- norm((A-A_old), type = "O") # update with each iteration
delta
View(A)
K
rm(k)
rm(i)
for (k in 1:K) {
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
# M-step
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
}
delta <- norm((A-A_old), type = "O") # update with each iteration
View(A_old)
MultinomialEM <- function(H, K, tau) {
n <- nrow(H) # number of observations
# initial centroid t (normalized)
index <- sample(1:n, K, replace = F)
t <- H[index, ]/rowSums(H[index, ])
# t is a matrix with dimension K*d(#of col for H), with each row represnents for a centroid.
# initial values before iteration
A <- matrix(0, nrow = n, ncol = K)
phi <- matrix(0, nrow = n, ncol = K)
c <- rep(1/K, K) #set initial value of weights c
b <- matrix(0, nrow = n, ncol = ncol(H))
delta <- 9999 # assign delta to be large at the beginning of while loop, updated with each iteration
while (delta >= tau) {
A_old <- A # at the beginning of each iteration, assign old value of A as A_old
for (k in 1:K) {
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
# M-step
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
}
#Compute a measure of the change of assignments during the current iteration
delta <- norm((A-A_old), type = "O") # update with each iteration
# turn soft assignment into hard assignment
}
m <- apply(A, 1, max) # dimension for m should be 1*n
# m[i] represents for which cluster observation i is assigned to
return(m)
}
a <- MultinomialEM(H = H, K = 3, tau = 0.001)
a <- MultinomialEM(H = H, K = 3, tau = 0.01)
n <- nrow(H) # number of observations
index <- sample(1:n, K, replace = F)
t <- H[index, ]/rowSums(H[index, ])
A <- matrix(0, nrow = n, ncol = K)
phi <- matrix(0, nrow = n, ncol = K)
c <- rep(1/K, K) #set initial value of weights c
b <- matrix(0, nrow = n, ncol = ncol(H))
A_old <- A # at the beginning of each iteration, assign old value of A as A_old
for (k in 1:K) {
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
A[is.nan(A)] = 0
# M-step
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
}
delta <- norm((A-A_old), type = "O") # update with each iteration
delta
MultinomialEM <- function(H, K, tau) {
n <- nrow(H) # number of observations
# initial centroid t (normalized)
index <- sample(1:n, K, replace = F)
t <- H[index, ]/rowSums(H[index, ])
# t is a matrix with dimension K*d(#of col for H), with each row represnents for a centroid.
# initial values before iteration
A <- matrix(0, nrow = n, ncol = K)
phi <- matrix(0, nrow = n, ncol = K)
c <- rep(1/K, K) #set initial value of weights c
b <- matrix(0, nrow = n, ncol = ncol(H))
delta <- 9999 # assign delta to be large at the beginning of while loop, updated with each iteration
while (delta >= tau) {
A_old <- A # at the beginning of each iteration, assign old value of A as A_old
for (k in 1:K) {
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
A[is.nan(A)] = 0
# M-step
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
}
#Compute a measure of the change of assignments during the current iteration
delta <- norm((A-A_old), type = "O") # update with each iteration
# turn soft assignment into hard assignment
}
m <- apply(A, 1, max) # dimension for m should be 1*n
# m[i] represents for which cluster observation i is assigned to
return(m)
}
a <- MultinomialEM(H = H, K = 3, tau = 0.01)
View(A)
View(A)
a_1 <- matrix(a, nrow=200, ncol=200)
image(a_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
a <- MultinomialEM(H = H, K = 3, tau = 0.001)
a_1 <- matrix(a, nrow=200, ncol=200)
image(a_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
image(H, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
dim(H)
b <- MultinomialEM(H = H, K = 4, tau = 0.001)
image(b_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
b_1 <- matrix(b, nrow=200, ncol=200)
image(b_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
H<-matrix(readBin("~/Documents/Columbia/Spring2017/GR5241SML/HWS/HW5/histograms.bin", "double", 640000), 40000, 16)
H[H==0] <- 0.01
a <- MultinomialEM(H = H, K = 3, tau = 0.1)
a_1 <- matrix(a, nrow=200, ncol=200)
image(a_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
image(a_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
a_1 <- matrix(as.matrix(a), nrow=200, ncol=200)
image(a_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
H<-matrix(readBin("~/Documents/Columbia/Spring2017/GR5241SML/HWS/HW5/histograms.bin", "double", 640000), 40000, 16)
H[H==0] <- 0.01
View(H)
index <- sample(1:n, K, replace = F)
t <- H[index, ]/rowSums(H[index, ])
t
t_1 <- t(apply(H[index,], 1, function(row){row/sum(row)}))
t==t_1
all(t==t_1)
a <- matrix(0, ncol=K, nrow=n) # a: assignment probabilities
phi <- matrix(0, ncol=K, nrow=n) # phi:  partial elements
b <- matrix(0, ncol=K, nrow=1)
cp <- matrix(1.0/K, ncol=1, nrow=K) # cp: mixture weights
m <- matrix(1.0/K, ncol=1, nrow=n) # m: hard assignments
a1 <- a
for(k in 1:K){
# E-step:
for(i in 1:n) {
phi[i, k] = exp(sum(H[i,] * log(t[k,])))
a[i, k] = cp[k] * phi[i, k] / sum(cp * phi[i,])
}
a[is.nan(a)] = 0
# M-step:
cp[k] = sum(a[,k]) / n
b = a[,k] %*% H
t[k,] = b / sum(b)
}
delta = norm(a1 - a, "O")
print(delta)
A <- matrix(0, nrow = n, ncol = K)
phi <- matrix(0, nrow = n, ncol = K)
c <- rep(1/K, K) #set initial value of weights c
b <- matrix(0, nrow = n, ncol = ncol(H))
delta <- 999 # assign delta to be large at the beginning of while loop, updated with each iteration
t <- H[index, ]/rowSums(H[index, ])
A_old <- A # at the beginning of each iteration, assign old value of A as A_old
for (k in 1:K) {
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
A[is.nan(A)] = 0
# M-step
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
}
delta <- norm((A-A_old), type = "O") # update with each iteration
delta
m <- apply(A, 1, max) # dimension for m should be 1*n
m_1 <- matrix(1.0/K, ncol=1, nrow=n) # m: hard assignments
for( i in 1:n){
m_1[i,1] <- which.max(a[i,])
}
return(m)
View(m_1)
table(m_1)
table(m)
m <- apply(A, 1, which.max) # dimension for m should be 1*n
table(m)
MultinomialEM <- function(H, K, tau) {
n <- nrow(H) # number of observations
# initial centroid t (normalized)
index <- sample(1:n, K, replace = F)
t <- H[index, ]/rowSums(H[index, ])
# t is a matrix with dimension K*d(#of col for H), with each row represnents for a centroid.
# initial values before iteration
A <- matrix(0, nrow = n, ncol = K)
phi <- matrix(0, nrow = n, ncol = K)
c <- rep(1/K, K) #set initial value of weights c
b <- matrix(0, nrow = n, ncol = ncol(H))
delta <- 999 # assign delta to be large at the beginning of while loop, updated with each iteration
while (delta >= tau) {
A_old <- A # at the beginning of each iteration, assign old value of A as A_old
for (k in 1:K) {
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
A[is.nan(A)] = 0
# M-step
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
}
#Compute a measure of the change of assignments during the current iteration
delta <- norm((A-A_old), type = "O") # update with each iteration
# turn soft assignment into hard assignment
}
m <- apply(A, 1, which.max) # dimension for m should be 1*n
# m[i] represents for which cluster observation i is assigned to
return(m)
}
a <- MultinomialEM(H = H, K = 3, tau = 0.1)
a_1 <- matrix(a, nrow=200, ncol=200)
image(a_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
b <- MultinomialEM(H = H, K = 3, tau = 0.001)
b_1 <- matrix(b, nrow=200, ncol=200)
image(b_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
image(a_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
image(b_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
b <- MultinomialEM(H = H, K = 4, tau = 0.001)
b_1 <- matrix(b, nrow=200, ncol=200)
image(b_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
image(b_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
image(b_1, col=gray.colors(4), xaxt="n", yaxt="n", main = "K=3 Clustering")
?image
image(b_1)
image(b_1, col=gray.colors(4), main = "K=3 Clustering")
c <- MultinomialEM(H = H, K = 5, tau = 0.001)
c_1 <- matrix(c, nrow=200, ncol=200)
image(c_1, col=gray.colors(3), xaxt="n", yaxt="n", main = "K=3 Clustering")
image(c_1, col=gray.colors(5), xaxt="n", yaxt="n", main = "K=3 Clustering")
time=list(x = 1, y = 2, z = 3)
time
c("k = 3")
data.frame(Method = c("K = 3", "K = 4", "K = 5"))
data.frame(Method = c("K = 3", "K = 4", "K = 5"), ComputationTime = c(time_1, time_2, time_3))
time_2 <- system.time(b <- MultinomialEM(H = H, K = 4, tau = 0.001))
time_2
start.time <- Sys.time()
start.time
end.time <- Sys.time()
time_3 <- end.time - start.time
time_3
MultinomialEM <- function(H, K, tau) {
n <- nrow(H) # number of observations
# initial centroid t (normalized)
index <- sample(1:n, K, replace = F)
t <- H[index, ]/rowSums(H[index, ])
# t is a matrix with dimension K*d(#of col for H), with each row represnents for a centroid.
# initial values before iteration
A <- matrix(0, nrow = n, ncol = K)
phi <- matrix(0, nrow = n, ncol = K)
c <- rep(1/K, K) #set initial value of weights c
b <- matrix(0, nrow = n, ncol = ncol(H))
delta <- 999 # assign delta to be large at the beginning of while loop, updated with each iteration
while (delta >= tau) {
A_old <- A # at the beginning of each iteration, assign old value of A as A_old
for (k in 1:K) {
for (i in 1:n) {
# E-step
phi[i,k] <- exp(sum(H[i, ]*log(t[k, ])))
A[i, k] <- c[k]*phi[i, k]/sum(c*phi[i, ])
}
A[is.nan(A)] = 0
# M-step
c[k] <- sum(A[, k])/n # update c
b[k, ] <- A[, k]%*%H
t[k, ] <- b[k, ]/sum(b[k, ]) # update t
}
#Compute a measure of the change of assignments during the current iteration
delta <- norm((A-A_old), type = "O") # update with each iteration
# turn soft assignment into hard assignment
}
m <- apply(A, 1, which.max) # dimension for m should be 1*n
# m[i] represents for which cluster observation i is assigned to
return(m)
}
H<-matrix(readBin("~/Documents/Columbia/Spring2017/GR5241SML/HWS/HW5/histograms.bin", "double", 640000), 40000, 16)
H[H==0] <- 0.01
start.time <- Sys.time()
a <- MultinomialEM(H = H, K = 3, tau = 0.001)
a_1 <- matrix(a, nrow=200, ncol=200)
image(a_1, col=gray.colors(3), main = "K=3")
end.time <- Sys.time()
time_1 <- end.time - start.time
a_1 <- t(matrix(a, nrow=200, ncol=200))
image(a_1, col=gray.colors(3), main = "K=3")
a_1 <- t(matrix(a, nrow=200, ncol=200, byrow = F))
image(a_1, col=gray.colors(3), main = "K=3")
a_1 <- matrix(a, nrow=200, ncol=200, byrow = F)
image(a_1, col=gray.colors(3), main = "K=3")
a_1 <- a_1[, ncol(a_1):1]
image(a_1, col=gray.colors(3), main = "K=3")
time_1
kable(data.frame(Method = c("K = 3", "K = 4", "K = 5"), ComputationTime = c(time_1, time_2, time_3)), format = "markdown")
?kable
library(knitr)
kable(data.frame(Method = c("K = 3", "K = 4", "K = 5"), ComputationTime = c(time_1, time_2, time_3)), format = "markdown")
kable(data.frame(Method = c("K = 3"), ComputationTime = time_1), format = "markdown")
return(m)
shiny::runApp('scr/ADS-Spring2017/Spr2017-proj5-grp1/app')
runApp('scr/ADS-Spring2017/Spr2017-proj5-grp1/app')
runApp('scr/ADS-Spring2017/Spr2017-proj5-grp1/app')
setwd("~/scr/ADS-Spring2017/Spr2017-proj5-grp1/app")
runApp()
load("./output/training_output/Ave_performace.RData")
load("../output/training_output/Ave_performace.RData")
team<-read.csv("./data/baseline/team.csv")[1:30,]
short<-read.csv("./data/baseline/short.csv",header = F)
runApp()
load("../output/training_output/Ave_performace.RData")
View(Ave_performace)
rown<-rownames(Ave_performace)
Ave_performace<-round(Ave_performace,3)
rownames(Ave_performace)<-c("ATL","BOS","CHI","CLE","GSW","HOU","IND","LAC","MEM","MIL","OKC","POR","SAS",
"TOR","UTA","WAS")
Ave_performace<-as.data.frame(Ave_performace)
graph_choice1<-function(xname="TRB",yname="FG"){
ind1<-which(colnames(Ave_performace)==xname)
ind2<-which(colnames(Ave_performace)==yname)
highchart() %>%
hc_add_theme(hc_theme_sandsignika())%>%
hc_title(text = "Highchart of Winning Rate vs Selected Variable") %>%
hc_xAxis(title=list(text = xname))%>%
hc_yAxis(title=list(text = yname))%>%
hc_add_series_scatter(Ave_performace[,ind1],Ave_performace[,ind2],
Ave_performace$y,Ave_performace$y,rownames(Ave_performace),
dataLabels = list(
enabled = TRUE,
format = "{point.label}"
))%>%
hc_chart(zoomType = "xy") %>%
hc_tooltip(useHTML = TRUE,
headerFormat = "<table>",
pointFormat = paste("<tr><th colspan=\"1\"><b>{point.label}</b></th></tr>"),
footerFormat = "</table>")
}
team<-read.csv("./data/baseline/team.csv")[1:30,]
short<-read.csv("./data/baseline/short.csv",header = F)
playoff16<-c("BOS","CHI","WAS","ATL","TOR","MIL","CLE","IND","GSW","POR","LAC","UTA","HOU","OKC","SAS","MEM")
short<-short[order(short$V1),]
colnames(team)[2]<-"Team"
team<-team[order(team$Team),]
team$short<-short$V2
team$Team<-team$short
tn<- team$Team %in% playoff16
newdata<- team[tn,]
n<-nrow(team)
d<-ncol(team)
newdata<-as.data.frame(cbind(newdata$FG.,newdata$X3P.,newdata$TRB,
newdata$AST,newdata$STL,newdata$BLK))
average<-apply(newdata,2,mean)
radardata<-matrix(NA,ncol = 6,nrow=16)
for (i in 1:16){
for (j in 1:6){
radardata[i,j]<-newdata[i,j]/average[j]
}
}
radardata<-as.data.frame(radardata)
labs<-c("FG%","X3P%","TRB","AST","STL","BLK")
path<-paste0("./data/PerGame_2015/",team)
path
data<-read.csv(path,header = T)
team<-read.csv("./data/baseline/team.csv")[1:30,]
View(team)
